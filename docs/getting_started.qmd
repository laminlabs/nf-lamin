---
title: Getting Started
format: gfm
---

```{r setup, include=FALSE}
Sys.setenv(NXF_ANSI_LOG = "false")
Sys.setenv(NXF_VER = "24.10.5")
```


To use the plugin, you need to configure it with your LaminDB instance and API key. This setup allows the plugin to authenticate and interact with your LaminDB instance, enabling it to record workflow runs and associated metadata.

## Set API Key

Retrieve your Lamin API key from your [Lamin Hub account settings](https://lamin.ai/settings) and set it as a Nextflow secret:

```bash
nextflow secrets set LAMIN_API_KEY <your-lamin-api-key>
```

## Configure the plugin

Add the following block to your `nextflow.config`:

```groovy
plugins {
  id 'nf-lamin'
}

lamin {
  instance = "<your-lamin-org>/<your-lamin-instance>"
  api_key = secrets.LAMIN_API_KEY
}
```

See the [Reference](reference) for more configuration options.

## Example Run with nf-core/scrnaseq

This guide shows how to register a Nextflow run with inputs & outputs for the [nf-core/scrnaseq](https://nf-co.re/scrnaseq/latest) pipeline.

<div class="dropdown">

What steps are executed by the nf-core/scrnaseq pipeline?

<!-- The diagram is from the nf-core/scrnaseq GitHub repository. -->
![](nf_core_scrnaseq_diagram.png)

</div>

### Run the pipeline

With the `nf-lamin` plugin configured, let’s run the `nf-core/scrnaseq` pipeline on remote input data.

```bash
# The test profile uses publicly available test data
nextflow run nf-core/scrnaseq \
  -r 2.7.1 \
  -profile docker,test \
  -plugins nf-lamin \
  --outdir gs://di-temporary-public/scratch/temp-scrnaseq/run_$(date +%Y%m%d_%H%M%S)
```


<div class="dropdown">

What is the full command and output when running this command?

```{bash}
nextflow run nf-core/scrnaseq \
  -latest \
  -r 2.7.1 \
  -profile docker \
  -plugins nf-lamin@0.1.0 \
  --input https://github.com/nf-core/test-datasets/raw/scrnaseq/samplesheet-2-0.csv \
  --fasta https://github.com/nf-core/test-datasets/raw/scrnaseq/reference/GRCm38.p6.genome.chr19.fa \
  --gtf https://github.com/nf-core/test-datasets/raw/scrnaseq/reference/gencode.vM19.annotation.chr19.gtf \
  --protocol 10XV2 \
  --skip_emptydrops \
  --outdir gs://di-temporary-public/scratch/temp-scrnaseq/run_$(date +%Y%m%d_%H%M%S)
```

</div>

```{r find_urls, echo=FALSE}
# look for transform and run URLs in .nextflow.log
logs <- readLines(".nextflow.log") |> paste(collapse = "\n")

transform_regex <- ".*Transform ([A-Za-z0-9]+) \\((https?://[^)]+)\\).*"
run_regex <- ".*Run ([A-Za-z0-9]+) \\((https?://[^)]+)\\).*"

transform_id <- sub(transform_regex, "\\1", logs)
run_id <- sub(run_regex, "\\1", logs)
transform_url <- sub(transform_regex, "\\2", logs)
run_url <- sub(run_regex, "\\2", logs)

# stop if urls don't start with https://
if (!grepl("^https://", transform_url) || !grepl("^https://", run_url)) {
  stop("URLs do not start with https://. Please check the logs.")
}
```

When you run this command, `nf-lamin` will print links to the `Transform` and `Run` records it creates in Lamin Hub:

```
✅ Connected to LaminDB instance 'laminlabs/lamindata' as 'rcannood'
Transform `r transform_id` (`r transform_url`)
Run `r run_id` (`r run_url`)
```


### View transforms & runs on Lamin Hub

You can explore the run and its associated artifacts through Lamin Hub or the Python package.

**Via Lamin Hub:**

-   Transform: [`r transform_id`](`r transform_url`)
-   Run: [`r run_id`](`r run_url`)

![](nf_core_scrnaseq_run.png)

**Via the Python package:**

```python
import lamindb as ln

ln.Run.get("`r run_id`")
```

    Run(uid='`r run_id`', name='trusting_brazil', started_at=2025-06-18 12:35:30 UTC, finished_at=2025-06-18 12:37:19 UTC, branch_id=1, space_id=1, transform_id=331, created_by_id=28, created_at=2025-06-18 12:35:33 UTC)
